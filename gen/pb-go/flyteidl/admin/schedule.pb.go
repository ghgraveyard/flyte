// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/admin/schedule.proto

package admin

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Represents a frequency at which to run a schedule.
type FixedRateUnit int32

const (
	FixedRateUnit_MINUTE FixedRateUnit = 0
	FixedRateUnit_HOUR   FixedRateUnit = 1
	FixedRateUnit_DAY    FixedRateUnit = 2
)

var FixedRateUnit_name = map[int32]string{
	0: "MINUTE",
	1: "HOUR",
	2: "DAY",
}

var FixedRateUnit_value = map[string]int32{
	"MINUTE": 0,
	"HOUR":   1,
	"DAY":    2,
}

func (x FixedRateUnit) String() string {
	return proto.EnumName(FixedRateUnit_name, int32(x))
}

func (FixedRateUnit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a71cf75647fcd25a, []int{0}
}

// Option for schedules run at a certain frequency e.g. every 2 minutes.
type FixedRate struct {
	Value                uint32        `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Unit                 FixedRateUnit `protobuf:"varint,2,opt,name=unit,proto3,enum=flyteidl.admin.FixedRateUnit" json:"unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FixedRate) Reset()         { *m = FixedRate{} }
func (m *FixedRate) String() string { return proto.CompactTextString(m) }
func (*FixedRate) ProtoMessage()    {}
func (*FixedRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_a71cf75647fcd25a, []int{0}
}

func (m *FixedRate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FixedRate.Unmarshal(m, b)
}
func (m *FixedRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FixedRate.Marshal(b, m, deterministic)
}
func (m *FixedRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixedRate.Merge(m, src)
}
func (m *FixedRate) XXX_Size() int {
	return xxx_messageInfo_FixedRate.Size(m)
}
func (m *FixedRate) XXX_DiscardUnknown() {
	xxx_messageInfo_FixedRate.DiscardUnknown(m)
}

var xxx_messageInfo_FixedRate proto.InternalMessageInfo

func (m *FixedRate) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *FixedRate) GetUnit() FixedRateUnit {
	if m != nil {
		return m.Unit
	}
	return FixedRateUnit_MINUTE
}

// Options for schedules to run according to a cron expression.
type CronSchedule struct {
	// Standard/default cron implementation as described by https://en.wikipedia.org/wiki/Cron#CRON_expression;
	// Also supports nonstandard predefined scheduling definitions
	// as described by https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions
	// except @reboot
	Schedule string `protobuf:"bytes,1,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// ISO 8601 duration as described by https://en.wikipedia.org/wiki/ISO_8601#Durations
	Offset               string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CronSchedule) Reset()         { *m = CronSchedule{} }
func (m *CronSchedule) String() string { return proto.CompactTextString(m) }
func (*CronSchedule) ProtoMessage()    {}
func (*CronSchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_a71cf75647fcd25a, []int{1}
}

func (m *CronSchedule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CronSchedule.Unmarshal(m, b)
}
func (m *CronSchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CronSchedule.Marshal(b, m, deterministic)
}
func (m *CronSchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronSchedule.Merge(m, src)
}
func (m *CronSchedule) XXX_Size() int {
	return xxx_messageInfo_CronSchedule.Size(m)
}
func (m *CronSchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_CronSchedule.DiscardUnknown(m)
}

var xxx_messageInfo_CronSchedule proto.InternalMessageInfo

func (m *CronSchedule) GetSchedule() string {
	if m != nil {
		return m.Schedule
	}
	return ""
}

func (m *CronSchedule) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

// Defines complete set of information required to trigger an execution on a schedule.
type Schedule struct {
	// Types that are valid to be assigned to ScheduleExpression:
	//	*Schedule_CronExpression
	//	*Schedule_Rate
	//	*Schedule_CronSchedule
	ScheduleExpression isSchedule_ScheduleExpression `protobuf_oneof:"ScheduleExpression"`
	// Name of the input variable that the kickoff time will be supplied to when the workflow is kicked off.
	KickoffTimeInputArg  string   `protobuf:"bytes,3,opt,name=kickoff_time_input_arg,json=kickoffTimeInputArg,proto3" json:"kickoff_time_input_arg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Schedule) Reset()         { *m = Schedule{} }
func (m *Schedule) String() string { return proto.CompactTextString(m) }
func (*Schedule) ProtoMessage()    {}
func (*Schedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_a71cf75647fcd25a, []int{2}
}

func (m *Schedule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Schedule.Unmarshal(m, b)
}
func (m *Schedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Schedule.Marshal(b, m, deterministic)
}
func (m *Schedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Schedule.Merge(m, src)
}
func (m *Schedule) XXX_Size() int {
	return xxx_messageInfo_Schedule.Size(m)
}
func (m *Schedule) XXX_DiscardUnknown() {
	xxx_messageInfo_Schedule.DiscardUnknown(m)
}

var xxx_messageInfo_Schedule proto.InternalMessageInfo

type isSchedule_ScheduleExpression interface {
	isSchedule_ScheduleExpression()
}

type Schedule_CronExpression struct {
	CronExpression string `protobuf:"bytes,1,opt,name=cron_expression,json=cronExpression,proto3,oneof"`
}

type Schedule_Rate struct {
	Rate *FixedRate `protobuf:"bytes,2,opt,name=rate,proto3,oneof"`
}

type Schedule_CronSchedule struct {
	CronSchedule *CronSchedule `protobuf:"bytes,4,opt,name=cron_schedule,json=cronSchedule,proto3,oneof"`
}

func (*Schedule_CronExpression) isSchedule_ScheduleExpression() {}

func (*Schedule_Rate) isSchedule_ScheduleExpression() {}

func (*Schedule_CronSchedule) isSchedule_ScheduleExpression() {}

func (m *Schedule) GetScheduleExpression() isSchedule_ScheduleExpression {
	if m != nil {
		return m.ScheduleExpression
	}
	return nil
}

// Deprecated: Do not use.
func (m *Schedule) GetCronExpression() string {
	if x, ok := m.GetScheduleExpression().(*Schedule_CronExpression); ok {
		return x.CronExpression
	}
	return ""
}

func (m *Schedule) GetRate() *FixedRate {
	if x, ok := m.GetScheduleExpression().(*Schedule_Rate); ok {
		return x.Rate
	}
	return nil
}

func (m *Schedule) GetCronSchedule() *CronSchedule {
	if x, ok := m.GetScheduleExpression().(*Schedule_CronSchedule); ok {
		return x.CronSchedule
	}
	return nil
}

func (m *Schedule) GetKickoffTimeInputArg() string {
	if m != nil {
		return m.KickoffTimeInputArg
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Schedule) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Schedule_CronExpression)(nil),
		(*Schedule_Rate)(nil),
		(*Schedule_CronSchedule)(nil),
	}
}

func init() {
	proto.RegisterEnum("flyteidl.admin.FixedRateUnit", FixedRateUnit_name, FixedRateUnit_value)
	proto.RegisterType((*FixedRate)(nil), "flyteidl.admin.FixedRate")
	proto.RegisterType((*CronSchedule)(nil), "flyteidl.admin.CronSchedule")
	proto.RegisterType((*Schedule)(nil), "flyteidl.admin.Schedule")
}

func init() { proto.RegisterFile("flyteidl/admin/schedule.proto", fileDescriptor_a71cf75647fcd25a) }

var fileDescriptor_a71cf75647fcd25a = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x8b, 0xda, 0x40,
	0x14, 0xc6, 0x13, 0x4d, 0xad, 0xbe, 0xaa, 0x95, 0xa9, 0x48, 0x5a, 0x2a, 0x88, 0x27, 0x29, 0x98,
	0x50, 0xed, 0x3f, 0x60, 0xac, 0x25, 0x1e, 0xda, 0xc2, 0xac, 0x1e, 0x76, 0x2f, 0x21, 0x26, 0x93,
	0x38, 0x98, 0xcc, 0x84, 0xc9, 0x64, 0x71, 0xff, 0xf5, 0x3d, 0x2d, 0x4e, 0x34, 0xab, 0x0b, 0x7b,
	0x9b, 0xc7, 0xf7, 0xde, 0xef, 0x7d, 0xdf, 0xf0, 0x60, 0x18, 0x25, 0x4f, 0x92, 0xd0, 0x30, 0xb1,
	0xfd, 0x30, 0xa5, 0xcc, 0xce, 0x83, 0x3d, 0x09, 0x8b, 0x84, 0x58, 0x99, 0xe0, 0x92, 0xa3, 0xee,
	0x45, 0xb6, 0x94, 0x3c, 0xde, 0x40, 0xeb, 0x0f, 0x3d, 0x92, 0x10, 0xfb, 0x92, 0xa0, 0x3e, 0x7c,
	0x78, 0xf4, 0x93, 0x82, 0x98, 0xfa, 0x48, 0x9f, 0x74, 0x70, 0x59, 0xa0, 0x9f, 0x60, 0x14, 0x8c,
	0x4a, 0xb3, 0x36, 0xd2, 0x27, 0xdd, 0xd9, 0xd0, 0xba, 0x25, 0x58, 0xd5, 0xf8, 0x96, 0x51, 0x89,
	0x55, 0xeb, 0xd8, 0x81, 0xf6, 0x52, 0x70, 0x76, 0x77, 0xde, 0x8d, 0xbe, 0x41, 0xf3, 0xe2, 0x43,
	0xb1, 0x5b, 0xb8, 0xaa, 0xd1, 0x00, 0x1a, 0x3c, 0x8a, 0x72, 0x52, 0x2e, 0x68, 0xe1, 0x73, 0x35,
	0x7e, 0xd6, 0xa1, 0x59, 0x01, 0xa6, 0xf0, 0x39, 0x10, 0x9c, 0x79, 0xe4, 0x98, 0x09, 0x92, 0xe7,
	0x94, 0xb3, 0x92, 0xe3, 0xd4, 0x4c, 0xdd, 0xd5, 0x70, 0xf7, 0x24, 0xae, 0x2a, 0x0d, 0xd9, 0x60,
	0x08, 0x5f, 0x12, 0x45, 0xfc, 0x34, 0xfb, 0xfa, 0xae, 0x65, 0x57, 0xc3, 0xaa, 0x11, 0x2d, 0xa1,
	0xa3, 0xf8, 0x95, 0x4b, 0x43, 0x4d, 0x7e, 0x7f, 0x3b, 0x79, 0x9d, 0xca, 0xd5, 0x70, 0x3b, 0xb8,
	0x4e, 0x39, 0x87, 0xc1, 0x81, 0x06, 0x07, 0x1e, 0x45, 0x9e, 0xa4, 0x29, 0xf1, 0x28, 0xcb, 0x0a,
	0xe9, 0xf9, 0x22, 0x36, 0xeb, 0x2a, 0xd9, 0x97, 0xb3, 0xba, 0xa1, 0x29, 0x59, 0x9f, 0xb4, 0x85,
	0x88, 0x9d, 0x3e, 0xa0, 0x0b, 0xe0, 0x35, 0xc0, 0x0f, 0x0b, 0x3a, 0x37, 0xff, 0x8a, 0x00, 0x1a,
	0x7f, 0xd7, 0xff, 0xb6, 0x9b, 0x55, 0x4f, 0x43, 0x4d, 0x30, 0xdc, 0xff, 0x5b, 0xdc, 0xd3, 0xd1,
	0x47, 0xa8, 0xff, 0x5e, 0xdc, 0xf7, 0x6a, 0xce, 0xaf, 0x87, 0x59, 0x4c, 0xe5, 0xbe, 0xd8, 0x59,
	0x01, 0x4f, 0x6d, 0x65, 0x9a, 0x8b, 0xb8, 0x7c, 0xd8, 0x31, 0x61, 0x76, 0xb6, 0x9b, 0xc6, 0xdc,
	0xbe, 0xbd, 0x8d, 0x5d, 0x43, 0xdd, 0xc4, 0xfc, 0x25, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x59, 0x16,
	0x27, 0x34, 0x02, 0x00, 0x00,
}
